// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testStruct.proto

package testSizeCheckUnmarshal

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestStruct1 struct {
	Field1 uint64 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 []byte `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
}

func (m *TestStruct1) Reset()      { *m = TestStruct1{} }
func (*TestStruct1) ProtoMessage() {}
func (*TestStruct1) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd6cd1df9e55b05, []int{0}
}
func (m *TestStruct1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStruct1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestStruct1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStruct1.Merge(m, src)
}
func (m *TestStruct1) XXX_Size() int {
	return m.Size()
}
func (m *TestStruct1) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStruct1.DiscardUnknown(m)
}

var xxx_messageInfo_TestStruct1 proto.InternalMessageInfo

func (m *TestStruct1) GetField1() uint64 {
	if m != nil {
		return m.Field1
	}
	return 0
}

func (m *TestStruct1) GetField2() []byte {
	if m != nil {
		return m.Field2
	}
	return nil
}

type TestStruct2 struct {
	Field1 uint64 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2 []byte `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3 []byte `protobuf:"bytes,3,opt,name=field3,proto3" json:"field3,omitempty"`
}

func (m *TestStruct2) Reset()      { *m = TestStruct2{} }
func (*TestStruct2) ProtoMessage() {}
func (*TestStruct2) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddd6cd1df9e55b05, []int{1}
}
func (m *TestStruct2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStruct2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TestStruct2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStruct2.Merge(m, src)
}
func (m *TestStruct2) XXX_Size() int {
	return m.Size()
}
func (m *TestStruct2) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStruct2.DiscardUnknown(m)
}

var xxx_messageInfo_TestStruct2 proto.InternalMessageInfo

func (m *TestStruct2) GetField1() uint64 {
	if m != nil {
		return m.Field1
	}
	return 0
}

func (m *TestStruct2) GetField2() []byte {
	if m != nil {
		return m.Field2
	}
	return nil
}

func (m *TestStruct2) GetField3() []byte {
	if m != nil {
		return m.Field3
	}
	return nil
}

func init() {
	proto.RegisterType((*TestStruct1)(nil), "testSizeCheckUnmarshal.TestStruct1")
	proto.RegisterType((*TestStruct2)(nil), "testSizeCheckUnmarshal.TestStruct2")
}

func init() { proto.RegisterFile("testStruct.proto", fileDescriptor_ddd6cd1df9e55b05) }

var fileDescriptor_ddd6cd1df9e55b05 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x49, 0x2d, 0x2e,
	0x09, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x03, 0x8b,
	0x64, 0x56, 0xa5, 0x3a, 0x67, 0xa4, 0x26, 0x67, 0x87, 0xe6, 0xe5, 0x26, 0x16, 0x15, 0x67, 0x24,
	0xe6, 0x48, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7,
	0xa7, 0xe7, 0xeb, 0x83, 0x95, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0x31, 0x46,
	0xc9, 0x96, 0x8b, 0x3b, 0x04, 0x6e, 0xb4, 0xa1, 0x90, 0x18, 0x17, 0x5b, 0x5a, 0x66, 0x6a, 0x4e,
	0x8a, 0xa1, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x94, 0x07, 0x17, 0x37, 0x92, 0x60, 0x52,
	0x60, 0xd4, 0xe0, 0x81, 0x8a, 0x1b, 0x29, 0x85, 0x22, 0x6b, 0x37, 0x22, 0x55, 0x3b, 0x5c, 0xdc,
	0x58, 0x82, 0x19, 0x49, 0xdc, 0xd8, 0xc9, 0xe2, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18,
	0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0xde, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47,
	0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d,
	0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x6f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x1d,
	0xf1, 0xd2, 0x31, 0x01, 0x00, 0x00,
}

func (this *TestStruct1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestStruct1)
	if !ok {
		that2, ok := that.(TestStruct1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if !bytes.Equal(this.Field2, that1.Field2) {
		return false
	}
	return true
}
func (this *TestStruct2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestStruct2)
	if !ok {
		that2, ok := that.(TestStruct2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if !bytes.Equal(this.Field2, that1.Field2) {
		return false
	}
	if !bytes.Equal(this.Field3, that1.Field3) {
		return false
	}
	return true
}
func (this *TestStruct1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&testSizeCheckUnmarshal.TestStruct1{")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestStruct2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&testSizeCheckUnmarshal.TestStruct2{")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTestStruct(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TestStruct1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStruct1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStruct1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field2) > 0 {
		i -= len(m.Field2)
		copy(dAtA[i:], m.Field2)
		i = encodeVarintTestStruct(dAtA, i, uint64(len(m.Field2)))
		i--
		dAtA[i] = 0x12
	}
	if m.Field1 != 0 {
		i = encodeVarintTestStruct(dAtA, i, uint64(m.Field1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestStruct2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStruct2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStruct2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Field3) > 0 {
		i -= len(m.Field3)
		copy(dAtA[i:], m.Field3)
		i = encodeVarintTestStruct(dAtA, i, uint64(len(m.Field3)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Field2) > 0 {
		i -= len(m.Field2)
		copy(dAtA[i:], m.Field2)
		i = encodeVarintTestStruct(dAtA, i, uint64(len(m.Field2)))
		i--
		dAtA[i] = 0x12
	}
	if m.Field1 != 0 {
		i = encodeVarintTestStruct(dAtA, i, uint64(m.Field1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestStruct1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 1 + sovTestStruct(uint64(m.Field1))
	}
	l = len(m.Field2)
	if l > 0 {
		n += 1 + l + sovTestStruct(uint64(l))
	}
	return n
}

func (m *TestStruct2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 1 + sovTestStruct(uint64(m.Field1))
	}
	l = len(m.Field2)
	if l > 0 {
		n += 1 + l + sovTestStruct(uint64(l))
	}
	l = len(m.Field3)
	if l > 0 {
		n += 1 + l + sovTestStruct(uint64(l))
	}
	return n
}

func sovTestStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestStruct(x uint64) (n int) {
	return sovTestStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TestStruct1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestStruct1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestStruct2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestStruct2{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTestStruct(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TestStruct1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStruct1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStruct1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			m.Field1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestStruct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = append(m.Field2[:0], dAtA[iNdEx:postIndex]...)
			if m.Field2 == nil {
				m.Field2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestStruct2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStruct2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStruct2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			m.Field1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestStruct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = append(m.Field2[:0], dAtA[iNdEx:postIndex]...)
			if m.Field2 == nil {
				m.Field2 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestStruct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field3 = append(m.Field3[:0], dAtA[iNdEx:postIndex]...)
			if m.Field3 == nil {
				m.Field3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestStruct = fmt.Errorf("proto: unexpected end of group")
)
